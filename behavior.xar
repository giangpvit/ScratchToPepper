<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="ScratchToPepper/onResume" type="0" type_size="1" nature="4" stm_value_name="ScratchToPepper/onResume" inner="1" tooltip="ScratchToPepper/onResume desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="Comment" id="11" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="63" y="437"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("https://www.moyashi-koubou.com/blog/python_scratch_send_val_cmd/\n\nScratch Lib:\nhttps://github.com/pilliq/scratchpy")]]></content></script><pluginContent><text><![CDATA[https://www.moyashi-koubou.com/blog/python_scratch_send_val_cmd/

Scratch Lib:
https://github.com/pilliq/scratchpy]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /></Box><Box name="Motion" id="16" localization="8" tooltip="" x="518" y="466"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Switch Case" id="9" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="186" y="102"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("hello")):
			self.output_1(p)
		elif(p == self.typeConversion("bye")):
			self.output_2(p)
		elif(p == self.typeConversion("clap")):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>&quot;hello&quot;</keyword><keyword>&quot;bye&quot;</keyword><keyword>&quot;clap&quot;</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="6" /></Box><Box name="n_お辞儀" id="12" localization="8" tooltip="Enter tooltip here" x="433" y="145"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="55" size="55"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="20" /><Key frame="30" value="20" /><Key frame="55" value="-11.5137" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0" /><Key frame="30" value="0" /><Key frame="55" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-10" /><Key frame="30" value="-10" /><Key frame="55" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="55" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="55" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-23.3816" /><Key frame="30" value="-23.3816" /><Key frame="55" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-69.4321" /><Key frame="30" value="-69.4321" /><Key frame="55" value="-6.32813" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0.2984" /><Key frame="30" value="0.2984" /><Key frame="55" value="0.0650264" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="99.0564" /><Key frame="30" value="99.0564" /><Key frame="55" value="81.6504" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="12.8346" /><Key frame="30" value="12.8346" /><Key frame="55" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-5.18321" /><Key frame="30" value="-5.18321" /><Key frame="55" value="-86.8394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="23.3816" /><Key frame="30" value="23.3816" /><Key frame="55" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="69.4321" /><Key frame="30" value="69.4321" /><Key frame="55" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.2984" /><Key frame="30" value="0.2984" /><Key frame="55" value="0.0659051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="99.0564" /><Key frame="30" value="99.0564" /><Key frame="55" value="81.2988" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-12.8346" /><Key frame="30" value="-12.8346" /><Key frame="55" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="5.18321" /><Key frame="30" value="5.18321" /><Key frame="55" value="87.0983" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_拍手" id="67" localization="8" tooltip="Enter tooltip here" x="433" y="254"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="134" size="134"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="17" value="-50.7129" /><Key frame="21" value="-42.8906" /><Key frame="25" value="-38.9" /><Key frame="28" value="-54.6" /><Key frame="31" value="-38.9" /><Key frame="34" value="-54.6" /><Key frame="37" value="-38.9" /><Key frame="40" value="-54.6" /><Key frame="43" value="-38.9" /><Key frame="46" value="-54.6" /><Key frame="49" value="-38.9" /><Key frame="52" value="-54.6" /><Key frame="55" value="-38.9" /><Key frame="58" value="-54.6" /><Key frame="61" value="-38.9" /><Key frame="64" value="-54.6" /><Key frame="67" value="-38.9" /><Key frame="70" value="-54.6" /><Key frame="73" value="-38.9" /><Key frame="76" value="-54.6" /><Key frame="79" value="-38.9" /><Key frame="82" value="-54.6" /><Key frame="85" value="-38.9" /><Key frame="88" value="-54.6" /><Key frame="91" value="-38.9" /><Key frame="94" value="-54.6" /><Key frame="97" value="-38.9" /><Key frame="100" value="-54.6" /><Key frame="103" value="-38.9" /><Key frame="106" value="-54.6" /><Key frame="107" value="-54.6" /><Key frame="119" value="-67.0605" /><Key frame="134" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="17" value="-22.5879" /><Key frame="21" value="-28.0371" /><Key frame="25" value="-33.5" /><Key frame="28" value="-35.4" /><Key frame="31" value="-33.5" /><Key frame="34" value="-35.4" /><Key frame="37" value="-33.5" /><Key frame="40" value="-35.4" /><Key frame="43" value="-33.5" /><Key frame="46" value="-35.4" /><Key frame="49" value="-33.5" /><Key frame="52" value="-35.4" /><Key frame="55" value="-33.5" /><Key frame="58" value="-35.4" /><Key frame="61" value="-33.5" /><Key frame="64" value="-35.4" /><Key frame="67" value="-33.5" /><Key frame="70" value="-35.4" /><Key frame="73" value="-33.5" /><Key frame="76" value="-35.4" /><Key frame="79" value="-33.5" /><Key frame="82" value="-35.4" /><Key frame="85" value="-33.5" /><Key frame="88" value="-35.4" /><Key frame="91" value="-33.5" /><Key frame="94" value="-35.4" /><Key frame="97" value="-33.5" /><Key frame="100" value="-35.4" /><Key frame="103" value="-33.5" /><Key frame="106" value="-35.4" /><Key frame="107" value="-35.4" /><Key frame="119" value="-23.291" /><Key frame="134" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="17" value="0.72935" /><Key frame="21" value="0.891916" /><Key frame="25" value="1" /><Key frame="28" value="1" /><Key frame="31" value="1" /><Key frame="34" value="1" /><Key frame="37" value="1" /><Key frame="40" value="1" /><Key frame="43" value="1" /><Key frame="46" value="1" /><Key frame="49" value="1" /><Key frame="52" value="1" /><Key frame="55" value="1" /><Key frame="58" value="1" /><Key frame="61" value="1" /><Key frame="64" value="1" /><Key frame="67" value="1" /><Key frame="70" value="1" /><Key frame="73" value="1" /><Key frame="76" value="1" /><Key frame="79" value="1" /><Key frame="82" value="1" /><Key frame="85" value="1" /><Key frame="88" value="1" /><Key frame="91" value="1" /><Key frame="94" value="1" /><Key frame="97" value="1" /><Key frame="100" value="1" /><Key frame="103" value="1" /><Key frame="106" value="1" /><Key frame="107" value="1" /><Key frame="119" value="0.580844" /><Key frame="134" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="17" value="35.4199" /><Key frame="21" value="22.4121" /><Key frame="25" value="12.2" /><Key frame="28" value="10.7" /><Key frame="31" value="12.2" /><Key frame="34" value="10.7" /><Key frame="37" value="12.2" /><Key frame="40" value="10.7" /><Key frame="43" value="12.2" /><Key frame="46" value="10.7" /><Key frame="49" value="12.2" /><Key frame="52" value="10.7" /><Key frame="55" value="12.2" /><Key frame="58" value="10.7" /><Key frame="61" value="12.2" /><Key frame="64" value="10.7" /><Key frame="67" value="12.2" /><Key frame="70" value="10.7" /><Key frame="73" value="12.2" /><Key frame="76" value="10.7" /><Key frame="79" value="12.2" /><Key frame="82" value="10.7" /><Key frame="85" value="12.2" /><Key frame="88" value="10.7" /><Key frame="91" value="12.2" /><Key frame="94" value="10.7" /><Key frame="97" value="12.2" /><Key frame="100" value="10.7" /><Key frame="103" value="12.2" /><Key frame="106" value="10.7" /><Key frame="107" value="10.7" /><Key frame="119" value="40.0781" /><Key frame="134" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="17" value="29.3555" /><Key frame="21" value="17.8431" /><Key frame="25" value="0.5" /><Key frame="28" value="0.5" /><Key frame="31" value="0.5" /><Key frame="34" value="0.5" /><Key frame="37" value="0.5" /><Key frame="40" value="0.5" /><Key frame="43" value="0.5" /><Key frame="46" value="0.5" /><Key frame="49" value="0.5" /><Key frame="52" value="0.5" /><Key frame="55" value="0.5" /><Key frame="58" value="0.5" /><Key frame="61" value="0.5" /><Key frame="64" value="0.5" /><Key frame="67" value="0.5" /><Key frame="70" value="0.5" /><Key frame="73" value="0.5" /><Key frame="76" value="0.5" /><Key frame="79" value="0.5" /><Key frame="82" value="0.5" /><Key frame="85" value="0.5" /><Key frame="88" value="0.5" /><Key frame="91" value="0.5" /><Key frame="94" value="0.5" /><Key frame="97" value="0.5" /><Key frame="100" value="0.5" /><Key frame="103" value="0.5" /><Key frame="106" value="0.5" /><Key frame="107" value="0.5" /><Key frame="119" value="36.246" /><Key frame="134" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="17" value="-100.463" /><Key frame="21" value="-101.693" /><Key frame="25" value="-104.5" /><Key frame="28" value="-104.5" /><Key frame="31" value="-104.5" /><Key frame="34" value="-104.5" /><Key frame="37" value="-104.5" /><Key frame="40" value="-104.5" /><Key frame="43" value="-104.5" /><Key frame="46" value="-104.5" /><Key frame="49" value="-104.5" /><Key frame="52" value="-104.5" /><Key frame="55" value="-104.5" /><Key frame="58" value="-104.5" /><Key frame="61" value="-104.5" /><Key frame="64" value="-104.5" /><Key frame="67" value="-104.5" /><Key frame="70" value="-104.5" /><Key frame="73" value="-104.5" /><Key frame="76" value="-104.5" /><Key frame="79" value="-104.5" /><Key frame="82" value="-104.5" /><Key frame="85" value="-104.5" /><Key frame="88" value="-104.5" /><Key frame="91" value="-104.5" /><Key frame="94" value="-104.5" /><Key frame="97" value="-104.5" /><Key frame="100" value="-104.5" /><Key frame="103" value="-104.5" /><Key frame="106" value="-104.5" /><Key frame="107" value="-104.5" /><Key frame="119" value="-100.814" /><Key frame="134" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="17" value="78.8379" /><Key frame="25" value="73.1" /><Key frame="28" value="63.2" /><Key frame="31" value="73.1" /><Key frame="34" value="63.2" /><Key frame="37" value="73.1" /><Key frame="40" value="63.2" /><Key frame="43" value="73.1" /><Key frame="46" value="63.2" /><Key frame="49" value="73.1" /><Key frame="52" value="63.2" /><Key frame="55" value="73.1" /><Key frame="58" value="63.2" /><Key frame="61" value="73.1" /><Key frame="64" value="63.2" /><Key frame="67" value="73.1" /><Key frame="70" value="63.2" /><Key frame="73" value="73.1" /><Key frame="76" value="63.2" /><Key frame="79" value="73.1" /><Key frame="82" value="63.2" /><Key frame="85" value="73.1" /><Key frame="88" value="63.2" /><Key frame="91" value="73.1" /><Key frame="94" value="63.2" /><Key frame="97" value="73.1" /><Key frame="100" value="63.2" /><Key frame="103" value="73.1" /><Key frame="106" value="63.2" /><Key frame="107" value="63.2" /><Key frame="119" value="71.2793" /><Key frame="134" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="17" value="42.0117" /><Key frame="25" value="54.5" /><Key frame="28" value="48.8" /><Key frame="31" value="54.5" /><Key frame="34" value="48.8" /><Key frame="37" value="54.5" /><Key frame="40" value="48.8" /><Key frame="43" value="54.5" /><Key frame="46" value="48.8" /><Key frame="49" value="54.5" /><Key frame="52" value="48.8" /><Key frame="55" value="54.5" /><Key frame="58" value="48.8" /><Key frame="61" value="54.5" /><Key frame="64" value="48.8" /><Key frame="67" value="54.5" /><Key frame="70" value="48.8" /><Key frame="73" value="54.5" /><Key frame="76" value="48.8" /><Key frame="79" value="54.5" /><Key frame="82" value="48.8" /><Key frame="85" value="54.5" /><Key frame="88" value="48.8" /><Key frame="91" value="54.5" /><Key frame="94" value="48.8" /><Key frame="97" value="54.5" /><Key frame="100" value="48.8" /><Key frame="103" value="54.5" /><Key frame="106" value="48.8" /><Key frame="107" value="48.8" /><Key frame="119" value="31.4649" /><Key frame="134" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="17" value="0.725835" /><Key frame="25" value="1" /><Key frame="28" value="1" /><Key frame="31" value="1" /><Key frame="34" value="1" /><Key frame="37" value="1" /><Key frame="40" value="1" /><Key frame="43" value="1" /><Key frame="46" value="1" /><Key frame="49" value="1" /><Key frame="52" value="1" /><Key frame="55" value="1" /><Key frame="58" value="1" /><Key frame="61" value="1" /><Key frame="64" value="1" /><Key frame="67" value="1" /><Key frame="70" value="1" /><Key frame="73" value="1" /><Key frame="76" value="1" /><Key frame="79" value="1" /><Key frame="82" value="1" /><Key frame="85" value="1" /><Key frame="88" value="1" /><Key frame="91" value="1" /><Key frame="94" value="1" /><Key frame="97" value="1" /><Key frame="100" value="1" /><Key frame="103" value="1" /><Key frame="106" value="1" /><Key frame="107" value="1" /><Key frame="119" value="0.574692" /><Key frame="134" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="17" value="29.0039" /><Key frame="25" value="10.7" /><Key frame="28" value="13.6" /><Key frame="31" value="10.7" /><Key frame="34" value="13.6" /><Key frame="37" value="10.7" /><Key frame="40" value="13.6" /><Key frame="43" value="10.7" /><Key frame="46" value="13.6" /><Key frame="49" value="10.7" /><Key frame="52" value="13.6" /><Key frame="55" value="10.7" /><Key frame="58" value="13.6" /><Key frame="61" value="10.7" /><Key frame="64" value="13.6" /><Key frame="67" value="10.7" /><Key frame="70" value="13.6" /><Key frame="73" value="10.7" /><Key frame="76" value="13.6" /><Key frame="79" value="10.7" /><Key frame="82" value="13.6" /><Key frame="85" value="10.7" /><Key frame="88" value="13.6" /><Key frame="91" value="10.7" /><Key frame="94" value="13.6" /><Key frame="97" value="10.7" /><Key frame="100" value="13.6" /><Key frame="103" value="10.7" /><Key frame="106" value="13.6" /><Key frame="107" value="13.6" /><Key frame="119" value="41.3965" /><Key frame="134" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="17" value="-44.8562" /><Key frame="25" value="-7.60004" /><Key frame="28" value="-0.5" /><Key frame="31" value="-7.60004" /><Key frame="34" value="-0.5" /><Key frame="37" value="-7.60004" /><Key frame="40" value="-0.5" /><Key frame="43" value="-7.60004" /><Key frame="46" value="-0.5" /><Key frame="49" value="-7.60004" /><Key frame="52" value="-0.5" /><Key frame="55" value="-7.60004" /><Key frame="58" value="-0.5" /><Key frame="61" value="-7.60004" /><Key frame="64" value="-0.5" /><Key frame="67" value="-7.60004" /><Key frame="70" value="-0.5" /><Key frame="73" value="-7.60004" /><Key frame="76" value="-0.5" /><Key frame="79" value="-7.60004" /><Key frame="82" value="-0.5" /><Key frame="85" value="-7.60004" /><Key frame="88" value="-0.5" /><Key frame="91" value="-7.60004" /><Key frame="94" value="-0.5" /><Key frame="97" value="-7.60004" /><Key frame="100" value="-0.5" /><Key frame="103" value="-7.60004" /><Key frame="106" value="-0.5" /><Key frame="107" value="-0.5" /><Key frame="119" value="-38.3685" /><Key frame="134" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="17" value="18.8943" /><Key frame="25" value="-22.6" /><Key frame="28" value="-27.6" /><Key frame="31" value="-22.6" /><Key frame="34" value="-27.6" /><Key frame="37" value="-22.6" /><Key frame="40" value="-27.6" /><Key frame="43" value="-22.6" /><Key frame="46" value="-27.6" /><Key frame="49" value="-22.6" /><Key frame="52" value="-27.6" /><Key frame="55" value="-22.6" /><Key frame="58" value="-27.6" /><Key frame="61" value="-22.6" /><Key frame="64" value="-27.6" /><Key frame="67" value="-22.6" /><Key frame="70" value="-27.6" /><Key frame="73" value="-22.6" /><Key frame="76" value="-27.6" /><Key frame="79" value="-22.6" /><Key frame="82" value="-27.6" /><Key frame="85" value="-22.6" /><Key frame="88" value="-27.6" /><Key frame="91" value="-22.6" /><Key frame="94" value="-27.6" /><Key frame="97" value="-22.6" /><Key frame="100" value="-27.6" /><Key frame="103" value="-22.6" /><Key frame="106" value="-27.6" /><Key frame="107" value="-27.6" /><Key frame="119" value="18.4549" /><Key frame="134" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右手ひろげ" id="13" localization="8" tooltip="Enter tooltip here" x="429" y="35"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="72" size="72"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="74.5" /><Key frame="18" value="83.939" /><Key frame="27" value="62.3176" /><Key frame="45" value="62.3176" /><Key frame="72" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="77.4" /><Key frame="27" value="98.3484" /><Key frame="45" value="98.3484" /><Key frame="72" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="45" value="0.996" /><Key frame="72" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="45" value="23.2058" /><Key frame="72" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-20.4" /><Key frame="27" value="-21.9" /><Key frame="45" value="-21.9" /><Key frame="72" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="42.6" /><Key frame="27" value="72.0688" /><Key frame="45" value="72.0688" /><Key frame="72" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Go to position Stand" id="7" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="612" y="137"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="5" /><Link inputowner="13" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="67" indexofinput="2" outputowner="9" indexofoutput="6" /><Link inputowner="7" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="67" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Raise Event" id="1" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="741" y="235"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="ScratchToPepper/onResume" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="ProcessMessage" id="2" localization="8" tooltip="" x="294" y="83"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[#Constant String
KEY_XPOS = 'x\xe5\xba\xa7\xe6\xa8\x99'#x座標
KEY_YPOS = 'y\xe5\xba\xa7\xe6\xa8\x99'#y座標
KEY_DIRECTION = '\xe5\x90\x91\xe3\x81\x8d'#向き
KEY_SAYTEXT = '\xe8\xa8\x80\xe8\x91\x89'#言葉
KEY_SOUND = '\xe9\x9f\xb3' #音
KEY_MOTION = 'motion'

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.curScratchPos = {KEY_XPOS : 0.0, KEY_YPOS: 0.0, KEY_DIRECTION : 0.0}
        self.messages = []

    def onUnload(self):
        pass

    def onInput_onStart(self, msg):
        self.logger.info("Message:" +str(msg))
        self.messages = msg
        self.processMessage()

    def onInput_onResume(self):
        self.logger.info("Resume")
        count = 0
        if len(self.messages) > 0:self.processMessage()
        else if count < 1:
            self.sayEnd()
            count += 1

    def processMessage(self):
        action = self.messages.pop(0)#action[key, value]
        keys = [KEY_XPOS, KEY_YPOS, KEY_DIRECTION]
        if action[0] in keys:self.processMove(action)
        self.logger.info("Current Position: " + str(self.curScratchPos))
        if KEY_SAYTEXT in action:
            if self.checkAction(action):
                self.sayText(action[1])

        if KEY_SOUND in action:
            if self.checkAction(action):
                self.playSound(action[1])

        if KEY_MOTION in action:
            if self.checkAction(action):
                self.showMotion(action[1])

        pass

    def checkAction(self, action):
        if (action[1] != 0) | (action[1] != '') :return True
        else:return False

    def processMove(self, action):
        keys = [KEY_XPOS, KEY_YPOS, KEY_DIRECTION]
        newPepperPos = {KEY_XPOS : 0.0, KEY_YPOS: 0.0, KEY_DIRECTION: 0.0}
        action_key = action[0]
        action_value = float(action[1])
        newPepperPos[action_key] = action_value - self.curScratchPos[action_key]
        self.curScratchPos[action_key] = action_value
        keys.pop(keys.index(action_key))

        for key in keys:
            index = self.findActionInMessages(key)
            if index != -1:
                message = self.messages.pop(index)
                message_key = message[0]
                message_value = float(message[1])
                newPepperPos[message_key] = message_value - self.curScratchPos[message_key]
                self.curScratchPos[message_key] = message_value

        position = [newPepperPos[KEY_XPOS], newPepperPos[KEY_YPOS], newPepperPos[KEY_DIRECTION]]
        self.move(position)

    def findActionInMessages(self, key):
        for i in range (0, len(self.messages)):
            if key in self.messages[i]:
                return i
        return -1

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onResume" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="5" /><Output name="sayEnd" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="move" type="0" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="playSound" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="sayText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="showMotion" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" /></Box><Box name="Move To" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="515" y="121"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self, p):
        self.logger.warning(p)
        try:
            newPos = list(p)
            newXPos = 0.01 * newPos[0]
            newYPos = 0.01 * newPos[1]
            newDirec = newPos[2]

        except:
            pass

        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(newXPos,
            newYPos,
            newDirec * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(newXPos,
            newYPos,
            newDirec * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Say Text" id="6" localization="8" tooltip="Say the text received on its input." x="509" y="340"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Say" id="7" localization="8" tooltip="Say some text. The text can be localized." x="441" y="44"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="よくできました" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Box name="Play Sound" id="8" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="515" y="227"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/Meow.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Box name="Init" id="9" localization="8" tooltip="" x="119" y="3"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /><Output name="messageOutput" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Load libs" id="10" localization="8" tooltip="Enter tooltip here" x="136" y="197"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# This is a helper box that loads all python modules in the "lib" subfolder.

import sys
import os


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.modules = {}
        behaviorPath = os.path.normpath(ALFrameManager.getBehaviorPath(self.behaviorId))

        self.importPath = os.path.join(behaviorPath, "lib")
        if self.importPath not in sys.path:
            sys.path.insert(0, self.importPath)
        for filename in os.listdir(self.importPath):
            if filename.endswith(".py"):
                moduleName = filename[:-3]
                module = __import__(moduleName, globals=globals())
                reload(module) # if the module was already present in the global namespace, reload it.
                globals()[moduleName] = module
                self.modules[moduleName] = module

    def onUnload(self):
        # Try to pretend the module was never loaded... provided it's mine!
        while self.importPath in sys.path:
            sys.path.remove(self.importPath)
        for moduleName, module in self.modules.iteritems():
            if sys.modules.get(moduleName, -1) is module:
                del sys.modules[moduleName]
                # Note that we do not delete globals()[moduleName]
                # This way other boxes can still use them for cleanup in OnUnload(),
                # but if someone imports a module of the same name again, it will replace
                # this one (as inclusion in sys.modules is the criteria for reimpoort)

    def onInput_onStart(self):
        # This is necessary for the modules to be loaded.
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" /></Box><Box name="Set Language" id="4" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="135" y="326"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Japanese" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="ConnectToScratch" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="129" y="43"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import scratch

#Constant String
CONSTANT_HOST = '172.19.44.118'

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.myScratch = scratch.Scratch(host=CONSTANT_HOST)
        try:
            self.myScratch.connect()
        except scratch.ScratchError as error:
            self.logger.info(error)
            self.onInput_onStop()
            return

        self.myScratch.receive()

    def onUnload(self):
        self.myScratch.disconnect()
        pass

    def onInput_onStart(self):
        while True:
            try:
                if self.myScratch.connected == True:
                    self.message = self.myScratch.receive()
                    self.messageOutput(self.message[1])
            except scratch.ScratchError as error:
                self.logger.info(error)
                pass

            except scratch.ScratchConnectionError as error:
                self.logger.info(error)
                pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="messageOutput" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Say (1)" id="3" localization="8" tooltip="Say some text. The text can be localized." x="725" y="83"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="もしかして進行方向に障害物がある" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Link inputowner="1" indexofinput="2" outputowner="16" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="5" /><Link inputowner="0" indexofinput="5" outputowner="9" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" /><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="8" /><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="9" /><Link inputowner="16" indexofinput="2" outputowner="2" indexofoutput="10" /><Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>